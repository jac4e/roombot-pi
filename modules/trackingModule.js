const { Matrix, inverse } = require('ml-matrix');
const fs = require('fs');
// https://arxiv.org/pdf/1704.06053.pdf

function storeData(d) {
	fs.writeFileSync(`${__dirname}/sensorData.json`, JSON.stringify(d));
}

// filter


class Filter {
    constructor(process, measurement) {
        // state vector is defined as [posX posY velX velY]^T
        this.state = [Matrix.zeros(4,1)];
        this.prediction = [Matrix.zeros(4,1)];
        this.covariance = {
            process: process,
            measurement: measurement,
            predict: [process]
        }
    }
    update(accel,pos,A,B,C){
        const prev = this.state.length-1;
        const next = this.state.length;
        const AT = A.transpose();
        const CT = C.transpose();
        // Update X based on measurement
            //Gain
            const r = C.mmul(this.covariance.predict[prev]).mmul(CT).add(this.covariance.measurement);
            this.gain = this.covariance.predict[prev].mmul(CT).mmul( inverse(r) );
            // Distance between current position and current measurement
            this.state.push( this.prediction[prev].add(this.gain.mmul(pos.transpose())) );
            // Update Uncertainty
            // WRONG A VVVVV
            const J = (Matrix.eye(4,4).sub(this.gain.mmul(C)));
            const JT = J.transpose();
            this.covariance.predict.push( J.mmul(this.prediction[prev].mmul(JT)).add(this.gain.mul(this.covariance.measurement).mmul(this.gain.transpose())) );
        // Predict State
            this.prediction.push( A.mmul(this.state[next]).add(B.mmul(accel)) );
            this.covariance.predict.push( A.mmul(this.covariance.predict[next]).mmul(AT).add(this.covariance.process) );
        return A.mmul(this.state[next]).add(B.mmul(accel));
    }
}

// change state transition and control matrix per robot state:
//  robot states: moving, stopped, turning


// Set acceleration and position measurements
// Setup filter
function test(){
const dt = 0.1;

const raw = new Matrix([[196,196,238,238,259,259,232,232,172,172,179,179,181,223,223,169,200,200,239,239,188,212,212,231,169,169,240,496,503,217,217,12,224,224,199,242,242,218,218,214,199,199,196,226,226,207,207,194,171,171,186,186,172,207,207,198,198,231,214,214,160,185,185,237,237,205,186,186,178,201,201,154,410,190,245,245,198,171,171,235,12,12,232,232,221,212,212,221,143,143,184,184,153,219,219,217,204,204,217,217,227,213,213,232,232,233,176,176,195,195,222,207,207,167,216,216,234,234,191,188,188,195,202,202,191,210,210,211,211,186,173,173,234,217,217,198,198,230,216,216,212,203,203,217,217,207,188,188,206,185,185,171,183,183,192,192,229,179,179,187,186,186,194,194,230,201,201,190,178,178,235,235,215,215,196,207,207,441,187,187,202,202,227,196,196,190,186,186,199,199,216,183,183,210,239,239,191,198,198,7,7,191,227,227,206,207,207,221,221,239,249,249,199,226,226,219,219,228,210,210,206,206,206,215,215,197,197,206,191,191,467,174,430,449,193,193,213,213,203,224,224,213,214,214,167,167,192,221,221,207,225,225,221,221,248,205,205,200,19,19,244,244,16,205,205,194,231,231,216,214,214,213,213,235,221,221,223,223,186,186,229,218,218,181,427,171,206,214,214,214,214,249,233,233,223,244,244,207,207,218,233,233,198,227,227,220,220,205,226,226,240,230,230,236,223,223,214,214,176,0,0,200,220,220,231,231,213,213,221,224,224,242,228,228,200,200,226,200,200,223,222,222,223,223,185,218,218,191,235,235,204,212,212,214,214,223,240,240,188,218,218,220,220,189,221,221,205,212,212,227,227,230,187,187,210,225,225,249,233,233,233,214,207,207,191,193,193,193,193,220,205,205,191,219,219,204,199,199,212,212,227,226,226,475,486,230,228,228,205,181,181,181,206,206,245,245,245,488,488,232,226,226,205,205,205,189,189,165,165,165,223,223,209,209,209,233,233,233,202,202,189,189,189,227,227,456,200,200,186,186,245,245,245,14,14,14,210,210,219,219,194,194,194,188,188,188,217,217,14,14,14,220,220,236,236,236,196,196,187,187,187,169,169,184,184,184,254,254,254,195,195,164,164,216,216,216,215,215,4,4,201,184,184,205,205,224,226,226,236,232,232,221,221,203,226,226,211,211,205,214,214,201,233,233,213,195,195,207,202,202,234,234,178,232,232,208,198,198,251,228,228,208,182,182,241,241,195,228,228,209,442,442,208,227,227,237,237,223,238,238,214,206,206,211,211,230,230,238,246,246,195,244,244,208,208,214,207,207,189,196,196,209,202,202,205,205,192,240,240,211,243,243,237,237,421,462,462,197,218,218,163,163,202,195,195,222,222,222,202,211,211,211,215,209,209,3,212,212,251,251,201,241,241,237,220,220,203,203,218,184,184,203,218,218,198,211,211,217,217,195,210,210,198,209,209,176,176,224,205,205,223,202,202,202,223,223,220,476,252,193,193,248,248,227,227,5,0,0,237,230,230,221,182,182,211,211,222,228,228,229,217,217,230,230,220,194,450,218,244,244,226,226,211,218,218,209,217,217,182,182,182,235,235,225,233,233,202,159,159,211,211,238,236,236,211,211,177,192,192,192,448,230,235,235,209,206,462,233,233,205,215,215,206,235,235,9,9,230,214,214,222,246,246,207,221,221,222,222,231,213,213,204,203,203,187,187,213,211,211,195,210,210,169,169,243,243,242,9,9,240,215,215,185,185,215,196,196,148,210,210,201,201,187,215,215,242,217,217,234,194,194,222,222,187,168,168,231,199,199,193,193,239,250,250,238,275,275,240,240,205,205,234,1,1,218,216,216,227,227,212,191,191,176,247,247,206,206,235,224,224,232,207,207,202,195,195,214,214,200,202,202,153,426,426,198,198,185,186,186,225,215,215,182,182,165,186,186,226,202,202,195,195,205,205,240,225,481,223,196,196,177,177,230,181,181,191,223,223,224,191,191,232,232,216,198,198,207,209,209,228,228,211,222,222,193,227,227,212,212,214,246,246,15,219,219,189,178,178,187,187,219,219,200,201,201,215,215,231,217,217,243,236,236,205,227,227,245,245,243,227,227,222,205,205,200,200,200,242,242,245,174,174,222,222,0,238,238,241,491,491,234,193,193,215,215,195,211,211,220,220,217,217,236,217,217,232,213,469,232,4,4,246,246,247,243,243,229,215,215,228,228,183,208,208,219,186,186,235,235,204,215,215,213,203,203,225,202,202,192,192,207,234,234,216,207,207,199,199,175,204,204,202,202,214,239,239,217,217,192,193,193,249,225,225,217,217,227,199,199,217,212,212,206,206,245,201,201,199,189,189,215,217,217,192,192,203,156,156,217,202,202,223,223,243,222,222,188,206,206,214,214,217,2,2,218,218,225,221,221,191,191,212,228,228,227,240,240,233,233,230,218,218,205,2,2,235,191,191,193,193,459,484,228,221,248,248,214,214,229,212,212,199,210,210,186,186,218,211,211,223,186,186,190,213,213,219,219,242,242,232,232,232,209,209,198,200,200,179,232,232,199,240,240,232,232,191,202,202,233,219,219,238,238,212,207,207,236,214,214,226,226,228,230,230,187,218,218,244,244,237,237,227,217,217,220,221,221,242,242,235,208,208,240,243,243,238,230,230,181,181,219,193,193,228,223,223,224,224,211,211,211,226,226,217,217,217,216,216,243,243,243,184,184,197,197,197,224,224,224,177,177,162,162,162,158,158,207,207,207,237,237,6,6,6,232,232,232,182,182,224,224,224,211,211,203,203,203,236,236,252,252,252,163,163,163,198,198,191,191,191,202,202,235,235,235,249,249,189,189,189,200,200,456,463,463,223,223,223,177,221,221,221,189,189,189,227,227,227,196,196,196,216,216,216,7,7,7,252,252,252,198,198,198,198,174,174,174,206,206,206,187,187,187,213,213,213,216,216]]);
const randomMoving = new Matrix([[494,26,238,202,202,493,493,0,502,502,284,13,13,254,483,227,25,25,213,242,242,246,242,242,248,504,489,232,488,256,249,249,271,502,246,495,495,0,241,241,283,250,250,474,218,8,264,238,16,16,251,9,9,241,241,253,244,244,470,494,494,479,479,458,511,255,31,54,54,14,14,267,283,283,210,211,211,503,247,482,262,262,259,238,238,458,267,11,506,506,22,8,8,486,230,224,224,0,235,235,279,388,388,510,35,35,225,225,196,248,504,222,268,268,22,278,267,251,251,221,241,241,493,269,13,234,234,38,494,494,4,488,488,459,459,510,499,243,11,218,218,505,505,499,499,8,236,236,272,21,21,37,37,19,498,498,479,252,508,266,266,35,267,267,240,234,234,31,31,223,478,478,502,260,4,7,231,231,275,275,266,481,225,8,441,185,199,199,510,510,475,51,51,14,257,257,509,509,483,193,193,8,11,11,289,33,236,18,274,454,201,201,32,269,269,216,216,509,35,35,512,537,1305,1283,515,742,696,-72,-27,-251,261,737,481,412,668,1074,1255,999,1790,1032,1032,1064,552,650,821,821,973,-242,14,222,478,400,1269,1269,-123,1205,-587,-514,424,680,713,457,-149,-208,-208,311,383,1151,-858,-858,1235,963,451,287,-474,38,161,-607,22,22,138,-198,153,153,-726,-520,-264,-280,-792,-109,-242,-498,556,747,1003,-277,748,623,879,-12,-206,818,-170,-292,-292,111,111,543,-121,-121,189,612,868,843,331,-109,-124,-380,-22,-402,-402,-411,-923,-904,-558,-1838,-1247,-1114,-2650,-2298,-2092,-1068,-686,-686,2,76,76,136,3,3,16,16,191,25,25,465,465,488,238,238,65,65,363,457,201,164,501,245,254,254,69,155,155,76,213,213,178,178,86,51,-205,-55,472,728,505,346,90,-6,-6,-453,-404,364,-230,-395,-395,-692,-948,-883,-845,-1357,-2121,-2126,-1870,-1348,-1348,-812,-556,-748,-316,-60,-66,-252,-508,206,157,1181,5806,2728,2728,1902,2976,2976,1765,741,748,-2382,-590,-673,-761,-505,-961,-961,-1471,-1272,-1272,-797,-541,-679,-335,-79,-97,-97,-160,37,37,300,159,159,215,-297,-422,-401,-401,-245,-175,81,-185,-256,-256,-440,-440,-482,-41,215,161,301,301,220,220,-79,-262,-262,-601,-506,-250,-57,-88,-88,-496,-496,-383,-205,51,60,184,184,440,398,709,709,504,504,-8,148,127,383,168,168,104,128,384,489,523,779,990,734,436,351,351,291,42,42,-272,-16,-341,-271,-15,-60,-178,-178,-177,108,108,99,99,179,153,153,138,-14,-14,-194,-194,-329,-329,-142,190,190,222,459,203,93,93,26,83,83,147,-199,-199,112,368,303,420,164,89,44,44,101,101,74,93,93,123,-64,-64,3,106,106,454,198,226,193,449,9,229,485,29,29,500,82,82,75,175,175,195,195,97,97,99,118,118,216,308,52,129,129,62,20,20,157,274,18,49,49,180,73,73,124,140,140,102,114,114,37,37,221,348,92,48,48,304,392,648,964,851,-429,-349,733,733,1719,2487,2360,1175,-361,1906,1906,1686,1335,1335,752,496,653,595,1363,1017,791,1047,789,774,1286,705,705,507,898,898,619,400,400,341,1109,326,357,869,820,818,50,-52,460,457,433,177,147,163,675,92,92,-328,-121,-121,345,-65,447,433,177,-355,-355,166,127,127,721,1237,981,805,805,941,590,1102,591,567,823,554,558,558,504,504,574,1055,543,684,428,1452,1511,2023,1346,296,296,1342,1658,1658,1171,1171,954,805,805,1000,786,1042,1019,808,552,720,720,656,400,929,848,848,791,791,925,800,800,486,638,638,1027,1203,691,731,987,5,43,555,1183,802,802,871,1383,1451,836,580,1060,1203,947,742,742,844,339,339,242,411,-613,-531,672,160,51,307,248,248,272,132,132,-196,572,600,20,-236,-107,-208,48,-521,-702,-446,-730,-1498,-1302,-2054,-2822,-3053,-944,-944,-912,-656,-677,-106,-106,647,310,310,366,110,9,30,286,217,59,59,362,474,474,249,249,96,330,330,104,360,219,219,32,272,272,100,660,404,494,8,264,296,40,308,347,347,242,444,444,29,285,498,391,391,281,489,489,242,242,342,250,506,446,314,314,460,458,458,322,322,451,329,329,184,55,55,421,165,6,262,258,321,321,363,415,415,479,223,30,348,348,498,443,443,391,391,341,444,444,336,398,142,118,345,345,423,167,487,493,237,380,263,263,164,164,456,525,-243,-15,841,-183,-158,-158,453,385,129,150,406,312,153,153,13,269,279,112,112,289,282,282,150,150,340,282,26,229,253,253,9,9,361,198,198,60,233,233,88,265,265,278,278,29,61,317,253,292,292,252,252,23,292,36,37,37,286,286,286,277,21,44,298,298,252,237,493,278,278,495,304,304,310,28,28,33,289,289,35,35,503,267,11,5,31,287,4,4,40,37,293,272,285,29,27,27,509,32,32,275,442,442,166,422,430,430,2,407,407,414,84,340,362,362,481,261,261,500,187,443,159,81,81,439,439,120,213,469,298,312,56,126,382,476,261,261,311,250,250,212,212,27,187,443,245,244,244,208,26,282,473,217,473,473,474,226,482,258,2,107,276,276,494,276,276,479,479,276,508,508,497,282,282,501,485,485,50,50,296,280,24,245,273,273,287,287,505,35,35,288,261,261,271,296,296,500,244,252,18,18,250,250,238,238,26,505,505,483,1,1,224,231,231,211,211,84,258,258,404,504,504,386,386,378,268,268,88,210,466,274,274,309,499,499,279,307,307,485,485,325,270,270,34,34,1,236,236,30,30,485,482,482,36,197,197,240,240,12,282,282,465,41,41,9,272,272,279,23,253,240,496,509,508,508,267,267,248,248,234,486,486,312,216,472,299,299,299,507,507,295,493,493,61,61,61,304,48,48,279,23,0,0,0,3,259,265,265,265,30,30,248,248,248,2,258,258,496,496,24,24,24,285,29,246,246,502,296,296,259,259,259,267,11,11,222,478,470,470,470,503,247,470,470,214,20,276,481,481,481,479,479,479,476,476,476,476,220,7,7,4,260,260,50,306,266,10,266,507,507,507,6,6,274,274,274,254,254,221,221,477,263,7,263,499,499,499,266,266,266,247,247,247,502,502,502,247,247,503,263,263,263,4,4,260,269,269]]);
const A = new Matrix([
    [1, 0, dt, 0],
    [0, 1, 0, dt],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
]);
const B = new Matrix([
    [(dt ^ 2) / 2, 0],
    [0, (dt ^ 2) / 2],
    [dt, 0],
    [0, dt]
]);
const C = new Matrix([
    [1,0,0,0],
    [0,1,0,0]
]);
const L = B.mmul(B.transpose()).mul(0.0312 ^ 2);

const kalman = new Filter(L, 0.01 ^ 2);

const adjusted = raw.sub(211.7915);
const u_t = adjusted.div(16042).mul(9.81);
const t = Date.now();
for (let i = 0; i<u_t.columns; i++){
    const accel = u_t.getColumn(i)[0]
    const input = new Matrix([[accel],[-accel]]);
    const m = new Matrix([[ 0 , 0 ]] ); // observed change in position
    console.log(kalman.update(input,m,A,B,C));
}
console.log(Date.now()-t);
let data = [];
for (output of kalman.state){
    data.push(output.getColumn(0));
}
storeData(data);
}
test();
function create(dt, L) {

    return new FilterNew(L, 0.01 ^ 2);
}

module.exports = create